#! /usr/bin/env python3
# license
# license.

"""
Looks for location in the locations database
"""

import sys, os, pprint, csv, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)
from locationdb import find, LocationNotFound

# ======================================================================

# acmacs:
# ? continents_to_antigens(chart) -> {name: [indices]} : for the passed chart returns mapping of continents names to sets of antigens indices
# ? has_antigens_isolated_in_continent(chart, continent_to_find) -> bool : Returns if the passed chart has antigens isolated in the passed continent

# ----------------------------------------------------------------------

def main(args):
    if not os.environ.get("LOCATIONDB_V2"):
        raise RuntimeError(f"LOCATIONDB_V2 not set (perhaps ${HOME}/acmacs-data/locationdb.json.xz)")
    writer = csv.writer(sys.stdout)
    writer.writerow(["Name", "Latitude", "Longitude"])
    found = 0
    failed = 0
    for line in open(args.source_file[0]):
        name = line.strip()
        entry = None
        try:
            entry = find(name=name, handle_replacement=True)
        except LocationNotFound:
            try:
                entry = find(name=name.replace("_", " "), handle_replacement=True)
            except LocationNotFound:
                pass
        if isinstance(entry, list):
            entry = entry[0]
        if entry:
            found += 1
        else:
            failed += 1
        writer.writerow([name, entry and entry.latitude, entry and entry.longitude])
    print("found:", found, "failed:", failed, file=sys.stderr)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument("source_file", nargs=1, help='text file with a name per line.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
