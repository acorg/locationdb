#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, os, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import locationdb_backend as ldb_m
from acmacs_base import timeit

# ----------------------------------------------------------------------

def main(args):
    ldb = ldb_m.LocDb()
    with timeit("Reading locationdb"):
        ldb.import_from(str(Path(args.path_to_locdb).expanduser()))
    for n in args.look_for:
        name = n.strip().upper()
        if args.cdc_abbreviation:
            r = ldb.find_cdc_abbreviation(name)
            print("look_for:" + r.look_for, "replacement:".format(r.replacement) if r.replacement else "", "name:" + r.name, "location_name:" + r.location_name, "country:" + r.country, "division:" + r.division, "lat/long: {} {}".format(r.latitude, r.longitude))
        elif args.country:
            print(ldb.country(name))
        elif args.continent:
            print(ldb.continent(name))
        else:
            r = ldb.find(name)
            print("look_for:" + r.look_for, "replacement:".format(r.replacement) if r.replacement else "", "name:" + r.name, "location_name:" + r.location_name, "country:" + r.country, "division:" + r.division, "lat/long: {} {}".format(r.latitude, r.longitude))

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('--db', action='store', dest='path_to_locdb', default=os.environ["ACMACSD_ROOT"] + "/data/locationdb.json.xz")
    parser.add_argument('look_for', nargs="+", help='name to find.')
    parser.add_argument('-c', '--cdc-abbreviation', action="store_true", dest="cdc_abbreviation", default=False, help='find by cdc_abbreviation.')
    parser.add_argument('--country', action="store_true", dest="country", default=False, help='print just country.')
    parser.add_argument('--continent', action="store_true", dest="continent", default=False, help='print just continent.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
