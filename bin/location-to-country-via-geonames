#! /usr/bin/env python3
# This script does not depend on acmacs-d stuff and can be used separately

"""
Gets list of locations (one per line) and outputs countries each location is in by looking up in geonames.org
"""

import sys, os, pprint, csv, urllib.request, json, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)

# ======================================================================

def main(args):
    input_stream = sys.stdin if args.source_file[0] == "-" else open(args.source_file[0])
    results = [subentry for entry in (lookup(line.strip()) for line in input_stream) for subentry in entry]
    if args.output_csv:
        writer = csv.writer(sys.stdout)
        writer.writerow(["Name", "Toponym", "Country"])
        for entry in results:
            writer.writerow([entry["name"], entry["toponym"], entry["country"]])
    elif args.output_json:
        json.dump(results, sys.stdout, indent=2)
    else:
        print("Name\tToponym\tCountry")
        for entry in results:
            print(entry["name"], entry["toponym"], entry["country"], sep="\t")

# ----------------------------------------------------------------------

def lookup(name):
    url = "http://api.geonames.org/search?{}".format(urllib.parse.urlencode({"name": name, "username": "acorg", "type": "json"}))
    rj = json.loads(urllib.request.urlopen(url=url).read().decode("utf-8"))
    return [e2 for e2 in ({"name": name, "toponym": e1.get("toponymName"), "country": e1.get("countryName")} for e1 in rj["geonames"]) if e2]

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--json', action='store_true', dest='output_json', default=False, help='Generate JSON.')
    parser.add_argument('--csv', action='store_true', dest='output_csv', default=False, help='Generate CSV.')

    parser.add_argument("source_file", nargs=1, help='text file with a name per line, - for stdin.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
